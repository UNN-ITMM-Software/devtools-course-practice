#############################################
##### Testing
#############################################

set(prefix "${MODULE}")

add_test(
    NAME ${prefix}_can_Run
    COMMAND ${APPLICATION}
)
set_tests_properties (${prefix}_can_Run PROPERTIES
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_initialize
    COMMAND ${APPLICATION} --initialize
)
set_tests_properties (${prefix}_can_initialize PROPERTIES
    PASS_REGULAR_EXPRESSION ""
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Print_Help
    COMMAND ${APPLICATION} --help
)
set_tests_properties (${prefix}_can_Print_Help PROPERTIES
    PASS_REGULAR_EXPRESSION "Usage: ./target [options]*"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Print
    COMMAND ${APPLICATION} --initialize --print
)
set_tests_properties (${prefix}_can_Print PROPERTIES
    PASS_REGULAR_EXPRESSION "never\ngonna\ngive\nyou\nup\n"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Reverse
    COMMAND ${APPLICATION} --initialize --reverse
)
set_tests_properties (${prefix}_can_Reverse PROPERTIES
    PASS_REGULAR_EXPRESSION "deque was reversed\n"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Push_Back
    COMMAND ${APPLICATION} --push_back never
)
set_tests_properties (${prefix}_can_Push_Back PROPERTIES
    PASS_REGULAR_EXPRESSION ""
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Push_Front
    COMMAND ${APPLICATION} --push_front never
)
set_tests_properties (${prefix}_can_Push_Front PROPERTIES
    PASS_REGULAR_EXPRESSION ""
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_cant_Push_Back_Without_Argument
    COMMAND ${APPLICATION} --push_back
)
set_tests_properties (${prefix}_cant_Push_Back_Without_Argument PROPERTIES
    PASS_REGULAR_EXPRESSION "Error:\n--push_back option must have one argument.\nRun --help for all supported options"
    LABELS "${MODULE}")


add_test(
    NAME ${prefix}_cant_Push_Front_Without_Argument
    COMMAND ${APPLICATION} --push_front
)
set_tests_properties (${prefix}_cant_Push_Front_Without_Argument PROPERTIES
    PASS_REGULAR_EXPRESSION "Error:\n--push_front option must have one argument.\nRun --help for all supported options"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Run_Several_Options
    COMMAND ${APPLICATION} --initialize --print --print
)
set_tests_properties (${prefix}_can_Run_Several_Options PROPERTIES
    PASS_REGULAR_EXPRESSION "never\ngonna\ngive\nyou\nup\nnever\ngonna\ngive\nyou\nup\n"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Push_Back_and_print
    COMMAND ${APPLICATION} --initialize --push_back never-gonna-let-you-down --print
)
set_tests_properties (${prefix}_can_Push_Back_and_print PROPERTIES
    PASS_REGULAR_EXPRESSION "never\ngonna\ngive\nyou\nup\nnever-gonna-let-you-down\n"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Push_Front_and_print
    COMMAND ${APPLICATION} --initialize --push_front you've-been-rickrolled --print
)
set_tests_properties (${prefix}_can_Push_Front_and_print PROPERTIES
    PASS_REGULAR_EXPRESSION "you've-been-rickrolled\nnever\ngonna\ngive\nyou\nup\n"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Push_Back_and_Push_Front_and_Print
    COMMAND ${APPLICATION} --initialize --push_front a --push_back b --print
)
set_tests_properties (${prefix}_can_Push_Back_and_Push_Front_and_Print PROPERTIES
    PASS_REGULAR_EXPRESSION "a\nnever\ngonna\ngive\nyou\nup\nb\n"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_invalid_command
    COMMAND ${APPLICATION} --lalala
)
set_tests_properties (${prefix}_invalid_command PROPERTIES
    PASS_REGULAR_EXPRESSION "Error:\nunrecognized command-line option.\nRun --help for all supported options"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Pop_Back
    COMMAND ${APPLICATION} --pop_back
)
set_tests_properties (${prefix}_can_Pop_Back PROPERTIES
    PASS_REGULAR_EXPRESSION "Deque is empty, can't pop_back."
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Pop_Front
    COMMAND ${APPLICATION} --pop_front
)
set_tests_properties (${prefix}_can_Pop_Front PROPERTIES
    PASS_REGULAR_EXPRESSION "Deque is empty, can't pop_front."
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Push_Back_to_Empty_Deque
    COMMAND ${APPLICATION} --push_back test --print
)
set_tests_properties (${prefix}_can_Push_Back_to_Empty_Deque PROPERTIES
    PASS_REGULAR_EXPRESSION "test\n"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Push_Front_to_Empty_Deque
    COMMAND ${APPLICATION} --push_front test --print
)
set_tests_properties (${prefix}_can_Push_Front_to_Empty_Deque PROPERTIES
    PASS_REGULAR_EXPRESSION "test\n"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Pop_Back_with_initialize
    COMMAND ${APPLICATION} --initialize --pop_back --print
)
set_tests_properties (${prefix}_can_Pop_Back_with_initialize PROPERTIES
    PASS_REGULAR_EXPRESSION "never\ngonna\ngive\nyou\n"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Pop_Front_with_initialize
    COMMAND ${APPLICATION} --initialize --pop_front --print
)
set_tests_properties (${prefix}_can_Pop_Front_with_initialize PROPERTIES
    PASS_REGULAR_EXPRESSION "gonna\ngive\nyou\nup\n"
    LABELS "${MODULE}")